package code{	//import DatagramSocketExample;		//import flash.desktop.NativeApplication;	//import flash.desktop.SystemIdleMode;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.events.DatagramSocketDataEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.net.DatagramSocket;	import flash.net.InterfaceAddress;	import flash.net.NetworkInfo;	import flash.net.NetworkInterface;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.utils.ByteArray;	import flash.utils.Timer;		public class reseau extends MovieClip 	{					public var localIP:TextField;		public var localPort:TextField;		public var logField:TextField;		public var targetIP:TextField;		public var targetPort:TextField;		public var message:TextField;				public var datagramSocket:DatagramSocket = new DatagramSocket();		var timer:Timer = new Timer(1000, 1); //une fois apres 1000ms, faire l'init		//public var Main:Main;		public var parentObj:Object; 				public function reseau()		{			addEventListener(Event.ADDED_TO_STAGE, stageAddHandler);			super();					}		private function stageAddHandler(e:Event):void {						timer.addEventListener(TimerEvent.TIMER, init);			timer.start();			setupUI();			removeEventListener(Event.ADDED_TO_STAGE, stageAddHandler);						if(this.parent != null)	parentObj = this.parent as Object;					}				private var recu:String;		public function dataReceived( event:DatagramSocketDataEvent ):void		{			//Read the data from the datagram						recu = event.data.readUTFBytes( event.data.bytesAvailable )						//if (!Main.master) 				log("Received from " + event.srcAddress + ":" + event.srcPort + "> " + recu );			//Main(this.parent).recoit(recu);				parentObj.recoit(recu);					}						public function sender( label:String ):void		{			var data:ByteArray = new ByteArray();			//Create a message in a ByteArray						data.writeUTFBytes( label );						//Send a datagram to the target			try			{				datagramSocket.send( data, 0, 0, targetIP.text, parseInt( targetPort.text )); 				log( "Sent message to " + targetIP.text + ":" + targetPort.text + "> " + label );			}			catch ( error:Error )			{				log( error.message );			}		}								public function init( event:Event ):void		{			timer.removeEventListener(TimerEvent.TIMER, init);			findIPAddress();						if( datagramSocket.bound ) 			{				datagramSocket.close();				datagramSocket = new DatagramSocket();							}			datagramSocket.bind( parseInt( localPort.text ), localIP.text );			datagramSocket.addEventListener( DatagramSocketDataEvent.DATA, dataReceived );			datagramSocket.receive();			log( "Bound to: " + datagramSocket.localAddress + ":" + datagramSocket.localPort );						sender("liaison ?");		}						public function log( text:String ):void		{			logField.appendText( text + "\n" );			logField.scrollV = logField.maxScrollV;			//trace( text );			// trop de log ralentit la machine !!		}				public function setupUI():void		{			targetIP = createTextField( 10, 10, "Target IP:", "192.168.0.10" );			targetPort = createTextField( 10, 35, "Target port:", "8000" );			message = createTextField( 10, 60, "Message:", "Lucy can't drink milk." );			localIP = createTextField( 10, 85, "Local IP", "192.168.0.14");			localPort = createTextField( 10, 110, "Local port:", "9000" );			createTextButton( 250, 135, "Bind", bindclic );			createTextButton( 300, 135, "Send", sender );			//createTextButton( 100, 135, "Init", init );			logField = createTextField( 10, 160, "Log", "", true, 100 )						//this.stage.nativeWindow.activate();		}				public function createTextField( x:int, y:int, label:String, defaultValue:String = '', editable:Boolean = true, height:int = 20 ):TextField		{			var labelField:TextField = new TextField();			labelField.text = label;			labelField.type = TextFieldType.DYNAMIC;			labelField.selectable = false;			labelField.mouseEnabled = false;			labelField.width = 100;			labelField.x = x;			labelField.y = y;//*/						var input:TextField = new TextField();			input.text = defaultValue;			input.type = TextFieldType.INPUT;			input.border = editable;			input.selectable = editable;			input.width = 780;			input.height = height;			input.x = x + 100;//labelField.width;			input.y = y;						this.addChild( labelField );		    this.addChild( input );			return input;		}				public function createTextButton( x:int, y:int, label:String, clickHandler:Function ):TextField		{			var button:TextField = new TextField();			button.htmlText = "<u><b>" + label + "</b></u>";			button.type = TextFieldType.DYNAMIC;			button.selectable = false;			button.width = 180;			button.x = x;			button.y = y;			button.addEventListener( MouseEvent.CLICK, clickHandler );						this.addChild( button );			return button;					}						public function findIPAddress():void		{			var netInterfaces:Vector.<NetworkInterface> = NetworkInfo.networkInfo.findInterfaces();			if (netInterfaces && netInterfaces.length > 0) {    				for each (var i:NetworkInterface in netInterfaces) {					if (i.active) {						var addresses:Vector.<InterfaceAddress> =i.addresses;						for each (var j:InterfaceAddress in addresses) {							log("- Host : " + j.address);   							localIP.text = j.address;						}						if (Main.master) {							targetPort.text="8000";							localPort.text="8989";							//bind();						}														}				}			}				}		public function bindclic( event:Event ):void		{			bind()		}				public function bind():void		{			if( datagramSocket.bound ) {								datagramSocket.close();				datagramSocket = new DatagramSocket();				}			datagramSocket.bind( parseInt( localPort.text ), localIP.text );			datagramSocket.addEventListener( DatagramSocketDataEvent.DATA, dataReceived );			datagramSocket.receive();			log( "Bound to: " + datagramSocket.localAddress + ":" + datagramSocket.localPort );		}							}}